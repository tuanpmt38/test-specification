package vn.mavn.patientservice.service.impl;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import vn.mavn.patientservice.dto.PatientDto;
import vn.mavn.patientservice.entity.Pathology;
import vn.mavn.patientservice.entity.Patient;
import vn.mavn.patientservice.exception.BadRequestException;
import vn.mavn.patientservice.repository.MedicalRecordRepository;
import vn.mavn.patientservice.repository.PathologyRepository;
import vn.mavn.patientservice.repository.PatientPathologyRepository;
import vn.mavn.patientservice.repository.PatientRepository;
import vn.mavn.patientservice.repository.ProvinceRepository;
import vn.mavn.patientservice.service.PatientService;
import vn.mavn.patientservice.util.Oauth2TokenUtils;

import javax.servlet.http.HttpServletRequest;

import java.util.Arrays;
import java.util.Collections;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(SpringExtension.class)
class PatientServiceImplTest {

    @Mock
    private PatientRepository patientRepository;

    @Mock
    private MedicalRecordRepository medicalRecordRepository;

    @Mock
    private ProvinceRepository provinceRepository;

    @Mock
    private PathologyRepository pathologyRepository;

    @Mock
    private PatientPathologyRepository patientPathologyRepository;

    @InjectMocks
    private PatientService patientService = new PatientServiceImpl();

    @Mock
    private HttpServletRequest httpServletRequest;

    private static final String ADDITIONAL_TOKEN_TEST = "eyJhbGciOiJIUzI1NiJ9..bz_1QAR0IoM5xg0rRS6WESdj9iw-Vqzv0ckB33RfntM";

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
        Mockito.when(httpServletRequest.getHeader("authorization"))
                .thenReturn(ADDITIONAL_TOKEN_TEST);
        Long userId = Oauth2TokenUtils.getValueByKeyInTheToken(ADDITIONAL_TOKEN_TEST, "user_id", Long.class);
    }

    @Test
    void addNew_TC1() {

        PatientDto data = PatientDto.builder().name(null).zaloPhone(null).phone(null).build();
        Assertions.assertNotNull(data);
        BadRequestException badRequestException = Assertions.assertThrows(BadRequestException.class,
                ()-> patientService.addNew(data));
        Assertions.assertTrue(badRequestException.getErrCodes().contains("err-patient-phone-number-is-mandatory"));
    }

    @Test
    void addNew_TC2() {

        PatientDto data = PatientDto.builder().name("name").zaloPhone("0987666555").phone("0987333444")
                .pathologyIds(Collections.singletonList(1L)).build();
        Assertions.assertNotNull(data);
        Assertions.assertNotNull(data.getPathologyIds());
        Mockito.when(pathologyRepository.findAllById(Collections.singleton(Mockito.anyLong())))
                .thenReturn(Collections.singletonList(pathology()));

        Patient patient = patientService.addNew(data);
        Assertions.assertNotNull(patient);

    }

    @Test
    void addNew_TC3() {
    }

    @Test
    void editPatient() {
    }

    @Test
    void getById() {
    }

    @Test
    void findAll() {
    }

    @Test
    void delete() {
    }

    private Patient patient() {
        Patient patient = Patient.builder().name("name").phone("0987333444").age(19).isActive(true).build();
        return patient;
    }

    private Pathology pathology (){
        Pathology pathology = new Pathology();
        pathology.setId(1L);
        pathology.setName("name");
        pathology.setIsActive(true);
        pathology.setDescription("test");
        return pathology;
    }
}
